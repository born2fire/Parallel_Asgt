#include <stdio.h>
#include <stdlib.h>
#include <mpi.h>

#define MAX_VALUE 100 // Set the max value for prime search

// Function to check if a number is prime
int is_prime(int num) {
    if (num < 2) return 0;
    for (int i = 2; i * i <= num; i++) {
        if (num % i == 0) return 0;
    }
    return 1;
}

int main(int argc, char *argv[]) {
    int rank, size;
    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    if (size < 2) {
        if (rank == 0) {
            printf("At least 2 processes required (1 master, 1+ slaves).\n");
        }
        MPI_Finalize();
        return 1;
    }

    if (rank == 0) { // Master process
        int num = 2;
        int worker, result;
        MPI_Status status;

        while (num <= MAX_VALUE) {
            MPI_Recv(&worker, 1, MPI_INT, MPI_ANY_SOURCE, 0, MPI_COMM_WORLD, &status);
            MPI_Send(&num, 1, MPI_INT, status.MPI_SOURCE, 0, MPI_COMM_WORLD);
            num++;
        }

        // Send termination signal (-1) to all workers
        for (int i = 1; i < size; i++) {
            MPI_Recv(&worker, 1, MPI_INT, MPI_ANY_SOURCE, 0, MPI_COMM_WORLD, &status);
            int end_signal = -1;
            MPI_Send(&end_signal, 1, MPI_INT, status.MPI_SOURCE, 0, MPI_COMM_WORLD);
        }
    } else { // Worker processes
        int num;
        while (1) {
            MPI_Send(&rank, 1, MPI_INT, 0, 0, MPI_COMM_WORLD);
            MPI_Recv(&num, 1, MPI_INT, 0, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);

            if (num == -1) break; // Termination condition

            int result = is_prime(num) ? num : -num;
            MPI_Send(&result, 1, MPI_INT, 0, 0, MPI_COMM_WORLD);
        }
    }

    MPI_Finalize();
    return 0;
}
