#include <stdio.h>
#include <mpi.h>

#define NUM_STEPS 1000000  // Number of iterations for approximation

int main(int argc, char *argv[]) {
    int rank, size, i;
    double step, x, sum = 0.0, pi, global_sum;
    
    MPI_Init(&argc, &argv);  
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);  
    MPI_Comm_size(MPI_COMM_WORLD, &size);  
    
    // Broadcast the number of steps
    MPI_Bcast(&step, 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);
    
    step = 1.0 / (double)NUM_STEPS;
    
    // Each process calculates a partial sum
    for (i = rank; i < NUM_STEPS; i += size) {
        x = (i + 0.5) * step;
        sum += 4.0 / (1.0 + x * x);
    }
    
    // Reduce all partial sums to compute final value of pi
    MPI_Reduce(&sum, &global_sum, 1, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);
    
    // Root process computes and prints the final value of pi
    if (rank == 0) {
        pi = step * global_sum;
        printf("Computed π ≈ %.10f\n", pi);
    }
    
    MPI_Finalize();  
    return 0;
}
